Q1. What is React?
Ans:- 1. JavaScript library to build Dynamic and Interactive user interfaces.
2. Developed at facebook in 2011.
3. Currently most widely used JS library for front-end development.
4. Used to create single page application (SPA).


Q2. What is working of DOM?
Ans:- DOM-> Document Object Model
1. Browser takes HTML and create DOM.
2.JS helps us modify DOM based on user actions or events.
3. In big applications, Working with DOM becomes complicated.


Q3. Problems with JavaScript?

Ans:- 1. React has a simpler mental model.
2. JS is cumbersome.
3. JS is Error-prone
4. JS is Hard to maintain.


Q4. Workin of React?

Ans:- 1. No need to worry about querying and updating DOM.
2. React creates a web page with small and reusable components.
3. React will take care of creating and updating DOM elements.
4. IT saves a lot of time, cheezen aasan hain, pahle se likhi hui hain

Q5. JS vs React?

Ans:- 1. JS is Imperative: You define steps to reach your desired state.
2. React is Declarative: You define the target UI state and then react figures out how to reach that state.

Q6. Introduction to Components?

Ans:- Components heps us write reusable, modular and better organized code.
-> React application is a tree of components with App Component as the root bringing everything together.


Q7. Create a React App.

Ans:- 1. Setup IDE
2. Create a React App
3. Project Structure


Q8. What is IDE?

Ans:- 1. IDE stands for Integrated Development Environment.
2. Software suite that consolidates basic tools required for Software development.
3. Central hub for coding, finding, Problems and testing.
4. Designed to improve developer efficiency.


Q9. Need to IDE?

Ans:- 1. Streamlines development.
2. Increases productivity.
3. Simplifies complex tasks.
4. Offers a unified workspace.
5. IDE Features.
1. Code Autocomplete.
2. Syntax Highlighting.
3. Version Control.
4. Error Checking.


Q10. Install Latest Node?

Ans:- 1. Search Dawnload Node.js


Q11. what is full form of LTS?

Ans:- Long Term Support

Q12. Create a React App?

Ans:- 1. Official tool is CRA(create react app).
2. vite is a modern tool to create React Project.
3. vite produces Quick and Small bundle Size.
4. vite: Use npm run dev to launch dev server.
5. Use npm start CRA


npm-> node package manager



-> Project Structure:- 

1. node_modules/ has all the installed node packages

2. public/directory: Contains static files that don't change.

3. src/Directory: Main folder for the React code.
1. components/: Reusable parts of the UI, like buttons or headers.
2. assets/: Images, fonts and other static files. 
3. styles/: CSS or stylesheets

4. package.json contains information about this project like name, version, dependencies on other react packages.

5. vite.config.js contains vite config.


Q13. What is File Extensions

Ans. .js: 
-> Stands for JavaScript
-> Contains regular JavaScript code
-> Used for general logic and components


.jsx:-
-> Stands for JavaScript XML
-> Combines JavaScript with HTML-like tags
-> Makes it easier to design UI components


Q14. What is diffrence between class components vs function components

Ans. Class Components:
Stateful: can manage state.
Lifecycle: Access to lifecycle methods.
verbose: More boilerplate code.
Not Preffered anymore.

Function Components: 
1. Initially stateless
2. Can use Hooks for state and effects.
3. Simpler and more concise.
4. More Popular



Q15. What is JSX?

1. Defination: JSX determines how the UI will look whereverthe component used.
2. Not HTML: Through it resembles HTML, you're actually writing JSX, which stands for JavaScript XML.
3. Conversion: JSX gets converted to regular JavaScript.



Q16. What is Exporting Components?

Ans. 1. Enables the use of a component in other parts.
2. Default Export: Allows exporting a single component as the default from a module.
3. Named Export: Allows exporting multiple items from a module.
4. Importing: To use an exported component, you need to import it in the destination file using import syntax.



Q17. What is Dynamic Components?

Ans. 1. Dynamic Content: JSX allows the creation of dynamic and Interactive UI Components.

2. JavaScript Expression: Using {}, we can embed and JS expression directly within JSX. This includes variables, function calls and mode.



Q18. What is Reusable Components?

Ans. 1. Modularity: Components are modular, allowing for easy reuse across diffrent parts of an application.

2. Consistency: Reusing components ensures UI Consistency and reduces the chance of descrepancies.

3. Efficiency: Reduces development time and effort by avoiding duplication of code.

4. Maintainability: Changes made to a reused component reflect everywhere it's used, simplfying updatesand bug fixes.



Q19. Including Bootstraps?

1. Responsive: Mobile-first design for all device sizes.
2. Components: Pre-styled elements like buttons and navbars.
3. Customizable: Modify default styles as needed.
4. Cross-Browser: Consistent look across browsers.
5. Open-Source: Free with community support.


1. Install: 
npm i bootstrap@5.3.2

2. import
import "bootstrap/dist/css/bootstrap.min.css";


Q20. What is fragments?

Ans. Allow grouping of multiple elements without extra DOM nodes.

Q21. Why we need fragments?

Ans. 
-> Return multiple elements without a wrapping parent.
-> Cleaner DOM and Consistent styling.


Q22. What is Map Method?
Ans. 
1. Purpose: Render lists from array data.
2. JSX Elements: Transform array items into JSX.
3. Inline Rendering: Directly inside JSX.
Example: {items.map((item)=> <li>item.name</li>)}
4. Key prop: Assign unique key for optimized re-renders.
<div>{item.name}</div>


Q23. What is Conditionals Rendering?
Ans. 
-> Conditional Rendering:
1. Displaying content based on certain conditions.
2. Allows for dynamic user interfaces.


-> Methods:
1. if-else statements: Choose between two blocks of content.
2. Ternary Operater: Quick way to choose between two options.
3. Logical Operations: Useful for rendering content when a condition is true.


-> Benifits:
1. Enhances user experience.
2. Reduces unnecessary rendering.
3. Makes apps more interactive and responsive.



Q24. Passing Data Via Props?
Ans.
-> Props in React:
1. Short for properties
2. Mechanism for passing data.
3. Read-only by default

-> Usage: 
1. Pass data from parent to child component.
2. Makes components reusable.
3. Defined as attributes in JSX.

-> Key Points:
1. Data flows one-way (downwards)
2. Props are immutable.
3. Used for communication between components.


-> Examples:
  <Header title="MY App" />


  Q25. What is CSS Modules?
  Ans.
  1. Localized class names to avoid glopbal conflicts.
  2. Styles are scoped to individual components.
  3. Helps in creating component-specific styles.
  4. Automatically generates unique class names.
  5. Promotes modular and maintainable CSS.
  6. Can use alongside global CSS when needed.



  Q26. Passing Children
  Ans.
  1. children is a special prop for passing elements into components.
  2. Used for flexibal and reusable components designs.
  3. Common in layout or container components
  4. Accessed with prop.children
  5. Can be any content: string, numbers, JSX, or components
  6. Enhances component composability and reusability.



  Q27. Managing Stateful
  Ans.
  1. State represents data that changes over time.
  2. State is local and private to the component.
  3. State changes cause the component to re-render.
  4. For functional component use the useState hook.
  5. React functions that start with word use are called hook
  6. Hooks should only be used inside components.
  7. Parent components can pass state down to children via props.
  8. Lifting state up: share state between components by moving it to their closest common ancestor.



2 hour complete in react:- https://www.youtube.com/watch?v=eILUmCJhl64&t=34s